{
	"info": {
		"_postman_id": "edc724ae-83da-4104-940a-93e25b1a660e",
		"name": "Products Module",
		"description": "In this collection all the APIs of product features are tested\n\n# **Features covered:**\n\n- Get product details\n    \n- Creating a prodct\n    \n- Updating a product\n    \n- Deleting a product",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25146527"
	},
	"item": [
		{
			"name": "GetProductDetails",
			"item": [
				{
					"name": "get single product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const json_response = pm.response.json();\r",
									"const expected_schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"category\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"image\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"rating\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"rate\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"count\": {\r",
									"          \"type\": \"integer\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"rate\",\r",
									"        \"count\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"title\",\r",
									"    \"price\",\r",
									"    \"description\",\r",
									"    \"category\",\r",
									"    \"image\",\r",
									"    \"rating\"\r",
									"  ]\r",
									"}\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response is an object and not empty\", function(){\r",
									"    pm.expect(json_response).to.be.a('object').and.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Expected products validation\", function(){\r",
									"    pm.expect(json_response.id).to.be.eql(parseInt(pm.collectionVariables.get(\"id\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Expected JSON schema validation\", function(){\r",
									"    pm.response.to.have.jsonSchema(expected_schema);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}products/{{id}}",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{id}}"
							]
						},
						"description": "Scenario: Get a specific product by product ID  \nGiven the API is available at \"{{base_url}}products/{id}\"  \nWhen I send a GET request to fetch product details for product ID \"{id}\"  \nThen I should receive a successful response with status code 200  \nAnd the response should match the expected JSON schema for a product  \nAnd the product returned should match the expected product ID \"{id}\""
					},
					"response": []
				}
			],
			"description": "Feature: Get Product Details"
		},
		{
			"name": "CreateProduct",
			"item": [
				{
					"name": "add product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const json_response = pm.response.json();\r",
									"const expected_schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"category\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"image\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"title\",\r",
									"    \"price\",\r",
									"    \"description\",\r",
									"    \"category\",\r",
									"    \"image\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Expected products validation\", function(){\r",
									"    pm.expect(json_response.id).to.be.eql(21);\r",
									"    pm.expect(json_response.title).to.be.eql(pm.collectionVariables.get(\"title\"));\r",
									"    pm.expect(json_response.description).to.be.eql(pm.collectionVariables.get(\"description\"));\r",
									"    pm.expect(json_response.price).to.be.eql(parseFloat(pm.collectionVariables.get(\"price\")));\r",
									"    pm.expect(json_response.image).to.be.eql(pm.collectionVariables.get(\"image\"));\r",
									"    pm.expect(json_response.category).to.be.eql(pm.collectionVariables.get(\"category\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Expected JSON schema validation\", function(){\r",
									"    pm.response.to.have.jsonSchema(expected_schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{title}}\",\r\n    \"price\": {{price}},\r\n    \"description\": \"{{description}}\",\r\n    \"image\": \"{{image}}\",\r\n    \"category\": \"{{category}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}products",
							"host": [
								"{{base_url}}products"
							]
						},
						"description": "Scenario: Create a product with valid data  \nGiven the API is available at \"{{base_url}}products\"  \nAnd I have valid product data in the request body  \nWhen I send a POST request to create the product  \nThen I should receive a successful response with status code 201  \nAnd the response should match the expected JSON schema for a product  \nAnd the product data returned should match the provided data"
					},
					"response": []
				}
			],
			"description": "Feature: Creation of product"
		},
		{
			"name": "UpdateProduct",
			"item": [
				{
					"name": "update product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const json_response = pm.response.json();\r",
									"const expected_schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"category\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"image\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"title\",\r",
									"    \"price\",\r",
									"    \"description\",\r",
									"    \"category\",\r",
									"    \"image\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response is an object and not empty validation\", function(){\r",
									"    pm.expect(json_response).to.be.a('object').and.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Expected products validation\", function(){\r",
									"    pm.expect(json_response.id).to.be.eql(parseInt(pm.collectionVariables.get(\"id\")));\r",
									"    pm.expect(json_response.title).to.be.eql(pm.collectionVariables.get(\"title\"));\r",
									"    pm.expect(json_response.description).to.be.eql(pm.collectionVariables.get(\"description\"));\r",
									"    pm.expect(json_response.price).to.be.eql(parseFloat(pm.collectionVariables.get(\"price\")));\r",
									"    pm.expect(json_response.image).to.be.eql(pm.collectionVariables.get(\"image\"));\r",
									"    pm.expect(json_response.category).to.be.eql(pm.collectionVariables.get(\"category\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Expected JSON schema validation\", function(){\r",
									"    pm.response.to.have.jsonSchema(expected_schema);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{title}}\",\r\n    \"price\": {{price}},\r\n    \"description\": \"{{description}}\",\r\n    \"image\": \"{{image}}\",\r\n    \"category\": \"{{category}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}products/{{id}}",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{id}}"
							]
						},
						"description": "Scenario: Update a product with valid data  \nGiven the API is available at \"{{base_url}}products/{{id}}\"  \nAnd I have valid updated product data in the request body  \nWhen I send a PUT request to update the product with ID \"{{id}}\"  \nThen I should receive a successful response with status code 200  \nAnd the response should match the expected JSON schema for a product  \nAnd the updated product details should match the provided data"
					},
					"response": []
				}
			],
			"description": "Feature: Update an Existing Product"
		},
		{
			"name": "DeleteProduct",
			"item": [
				{
					"name": "delete product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const json_response = pm.response.json();\r",
									"const expected_schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"category\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"image\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"title\",\r",
									"    \"price\",\r",
									"    \"description\",\r",
									"    \"category\",\r",
									"    \"image\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Expected products validation\", function(){\r",
									"    pm.expect(json_response.id).to.be.eql(parseInt(pm.collectionVariables.get(\"id\")));\r",
									"});\r",
									"\r",
									"pm.test(\"Expected JSON schema validation\", function(){\r",
									"    pm.response.to.have.jsonSchema(expected_schema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}products/{{id}}",
							"host": [
								"{{base_url}}products"
							],
							"path": [
								"{{id}}"
							]
						},
						"description": "Scenario: Delete a product by product ID  \nGiven the API is available at \"{{base_url}}products/{{id}}\"  \nWhen I send a DELETE request to delete the product with ID \"{{id}}\"  \nThen I should receive a successful response with status code 200  \nAnd the response should match the expected JSON schema for a deleted product  \nAnd the deleted product data should match the provided product ID \"{{id}}\""
					},
					"response": []
				}
			],
			"description": "Feature: Delete a Product"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Assigning the values from csv file to collection level variables",
					"pm.collectionVariables.set(\"id\", pm.iterationData.get(\"id\"));",
					"pm.collectionVariables.set(\"title\", pm.iterationData.get(\"title\"));",
					"pm.collectionVariables.set(\"price\", pm.iterationData.get(\"price\"));",
					"pm.collectionVariables.set(\"description\", pm.iterationData.get(\"description\"));",
					"pm.collectionVariables.set(\"category\", pm.iterationData.get(\"category\"));",
					"pm.collectionVariables.set(\"image\", pm.iterationData.get(\"image\"));",
					"pm.collectionVariables.set(\"rate\", pm.iterationData.get(\"rate\"));",
					"pm.collectionVariables.set(\"count\", pm.iterationData.get(\"count\"));",
					"",
					"",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"",
					"",
					"pm.test(\"successful response validation\", function(){",
					"    pm.response.to.have.status(200)",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "",
			"type": "string"
		},
		{
			"key": "title",
			"value": "",
			"type": "string"
		},
		{
			"key": "price",
			"value": "",
			"type": "string"
		},
		{
			"key": "description",
			"value": "",
			"type": "string"
		},
		{
			"key": "category",
			"value": "",
			"type": "string"
		},
		{
			"key": "image",
			"value": "",
			"type": "string"
		},
		{
			"key": "rate",
			"value": "",
			"type": "string"
		},
		{
			"key": "count",
			"value": "",
			"type": "string"
		},
		{
			"key": "limit",
			"value": "",
			"type": "string"
		},
		{
			"key": "sort",
			"value": "",
			"type": "string"
		}
	]
}